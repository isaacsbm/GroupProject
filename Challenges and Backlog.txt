(Anthony) Challenge 1 - Responsively positioning the items inside of the music-player-graphic.

Positioning the dynamic items was different than how I've previously positioned things. And that's by virtue of how I sized and positioned the 2 elements on the main page. 

The key was to use flex: 1 1 auto on both the .music-player-graphic-container, and the #playlists-container.

By setting these properties on both .music-player-graphic-container and #playlists-container, I'm ensuring that these elements will equally share the available space in their parent container. They will grow and shrink together as the viewport size changes, maintaining their relative sizes.

This is crucial for the responsiveness of the .music-player-album-container because its size and position are set relative to its parent, .music-player-graphic-container (ie, all of the percentages). As the graphic container resizes with the viewport, the album container also resizes and repositions accordingly, maintaining its relative size and position.

In addition, by ensuring that the #playlists-container and .music-player-graphic-container share space equally, you're improving the overall responsiveness of the layout. No matter the viewport size, these elements will adjust their sizes to fit without overflowing or leaving unused space.

NOTE: more work on responsiveness is needed as the page breaks at less than 800px width.

(Anthony) Challenge 2 - correctly formatting the data for song creation and communication with the back end.

Solution - Using a FormData() object to submit the form data to the back end. FormData() is similar to a plain javascript object, albeit it's more equipped to handle file uploads.

Key differences - 
1. designed to handle file uploads, easily handles <input type="file...">
2. auto serializes data for form sub to handle file data. standard js objects as serialized as json, which doesn't handle file uploads as conveniently.
    - Content-Type is auto set to 'multipart/form-data' , vs 'application/json'
3. you append to FormData to add key/vals

(Anthony) Challenge 3 Addressing crashing that occurs when uploading a new file on edit song - react-dom.development.js:12056 Uncaught TypeError: songFile.split is not a function
    at ManipulateSong (ManipulateSong.jsx:104:87) 

    Originally was using songFile.split to extract the name of the file from the file path. But this would error because technically, songFile is a file Object...

    Changed it to <p>Current File: {songFile}, which correctly displayed the file name, but if you tried to upload a file, got:

    react-dom.development.js:14887 Uncaught Error: Objects are not valid as a React child (found: [object File]). If you meant to render a collection of children, use an array instead.

    Because you can't directly render an object in JSX. Confusingly, when i console.logged(typeof songFile) on loading of the component, it was a string. For some reason, React was logging songFile as string when logging the state, even though technically songFile is a file Object(?). It fixed the error when uploading a new file when changing {songFile} to {songfile.name} however, nothing would show on the page until you upload a file.

    The solution was to create separate state for the songFile and the songFileName. which allowed the current file mp3 name to display prior to uploading something and no crashing to occur when uploading a new file.





To do 11/14/2023:

do get all songs

do get all playlists

create song form: upload button, song name, artist name, album name

be able to route to chat page later

utilize the updatePlaylist for the add to active.


Backlog 

(Anthony)Improve responsiveness for all pages.
(Brittany) Finish creating Backend playlist model and functions with it, and check that the playlist model is working
    -Learn how to check playlist function with the array of tracks on Postman

(Brittany) Challenge 1 - Learning how to downscale projects when they are too large for the timeframe
    Challenge 2 - Music upload vs. File upload 

(Rindy) Have been working on the Login Reg/Authorizations/socket.io Middleware/FrontEnd/Backend issues - LoggedUser = Authorization
    - Also dealt with the conflicts re the Commits
    - console.log references Princess Bride, Robin Hood Men in Tights, & Goonies Quotes


TO DO: 
    - Backend to Frontend connection (Rindy)
    - Music Player connection (Brittany)
    - Playlist feature tied to logged in user (Rindy, Anthony)
    - Create Playlist feature for going through songs in track order (Brittany)
    - Image upload for album cover (Brittany)

    -Frontend(get all, create ,etc balh) logic (Anthony)
    - Adding a dropdown for all songs in create playlist?
    (Extra!)
    -Shazam API Pull
        -Allows for user to search API and download songs to the database